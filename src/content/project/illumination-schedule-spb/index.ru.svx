---
{
	"description": "Веб-приложение для отображения данных графика наружного освещения города Санкт-Петербурга.",
	"featured": true,
	"lang": "ru",
	"layout": "project",
	"maintained": true,
	"name": "illumination-schedule-spb",
	"repository": "EricRovell/illumination-schedule-spb",
	"techstack": [
		"Svelte",
		"TypeScript"
	],
	"type": "web-application",
	"updated": "2023-05-07T2:14:00.000Z",
	"website": "https://illumination-schedule-spb.vercel.app/"
}
---

## Мотивация

Будучи увлечённым фотографией в жанре «городской пейзаж», мне часто приходится ожидать включения городской подсветки, либо знать точное время её отключения для планирования кадров. Ежегодно публикуется расписание работы наружного освещения и городской подсветки на сайте государственного бюджетного учреждения [ЛенСвет][lensvet].

Заглянуть в сравнительно небольшую таблицу, найти необходимую дату и сверить время — не особо сложная задача. Всё же, появилось желание немного упростить задачу себе и своим коллегам, написав минималистичное веб-приложение для актуального отображения данных городской подсветки.

## Входные данные

Данные представляют из себя таблицу (на момент написания этого документа актуальным является расписание за [2023 год][schedule]), разбитую по месяцам. Записи сгруппированны по датам, так как расписание меняется не изо дня в день, а каждые несколько суток. Часть столбцов не имеет для нас ценности; в приложении используются такие столбцы как *числа месяца*, *количество дней*, *время включения* и *время отключения*.

Необходимые данные выписываются вручную в виде массива целых чисел, что облегчает их преобразование и делает структуру компактной. На данный момент *пока* решено не реализовывать парсинг данных напрямую из документа, так как структура документа может поменяться, а сам перенос данных не занимает много времени.

Также добавлены базовые тесты для валидации входных данных. К примеру, данные должны представлять из себя натуральные числа, а определённые данные должны быть ограничены: величина месяца должна находиться в пределах значений от 1 до 12. Та же логика применяется для значений дат и времени. Данные тесты позволяют нивелировать человеческий фактор при переносе данных из документа.

## Функционал

### Отсчёт до события

Во время ожидания подсветки (или в спешке прийти на точку съёмки до её отключения) хотелось бы не просто знать время и постоянно сверяться с часами, а видеть перед собой оставшееся время до события. По этой причине первостепенным функционалом стал таймер отсчёта до ближайшего в будущем события. Помимо этого отображается текущее состояние городской подсветки.

#### Реализация

Для реализации функционала данные расписания преобразовываются: время каждого переключения подсветки расписания сохраняется как [эпохальное время][epoch], и таким образом данные расписания превращаются во «временной отрезок», а эпохальное время каждого события разбивает его на отрезки:

- ...
- *включение*: 1622505600000
- *выключение*: 1622592000000
- ...

Сверяя пары значений с текущим временем, можно определить между какими именно событиями соотносится настоящее, работает ли подсветка в данный момент и сколько осталось времени для переключения. Вычисляя время до следующего события единожды, запускается соответствующий таймер. После срабатывания таймера расчитывается время до следующего события, поэтому лишних вычислений до наступления события более не производится.

### Отображение данных по дате

Отсчёт ограничивается горизонтом планирования в одни сутки. Зачастую кадры планируются задолго, по этой причине имеется необходимость знать время переключения подсветки наперёд. Для этого реализована возможность отображения данных о времени работы городской подсветки по указанной дате за время, доступное в актуальном расписании.

#### Реализация

Для отображения данных за произвольную дату нет необходимости каким-то образом преобразовывать исходные данные, как это было необходимо для отсчёта. Простой перебор с использованием данных о запрашиваемой пользователем данных позволяет отобразить нужную информацию.

### Прогрессивное веб-приложение

Частое использование и проста веб-приложения подразумевает практичность практичность добавления <abbr title="Progressive Web Apps">PWA</abbr> функционала. В первую очередь это позволяет добавить веб-приложение на рабочий стол.

Минималистичность приложения и редкое обновление данных подталкивает к добавлению возможности работы приложения в отсутствии сети интернет. Для этого был написан *service-worker* со стратегией [*приоритет сети, кэш по умолчанию*][service-worker-strategy].

## Что я узнал нового

Благодаря проекту я впервые реализовал <abbr title="Progressive Web Apps">PWA</abbr> функционал, написал первый `service-worker` и был крайне восхищён его возможностями.

[lensvet]: https://lensvet.spb.ru/grafik_raboty_naruzhnogo_osvescheni/
[schedule]: https://lensvet.spb.ru/d/26909/d/no-2023-gbu-utverzhden-1.pdf
[epoch]: https://www.epoch101.com/
[service-worker-strategy]: https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache
