---
title: "Проект Эйлера #1: Числа, кратные 3 или 5"
description: "Решаем Проект Эйлера, проблема №1: Числа кратные 3 или 5."
series: "project-euler"
lang: ru
created: 2021-06-10T00:00:00.000Z
updated: 2022-05-24T00:20:00.000Z
keywords: [ "project euler", "math" ]
published: true
layout: blogpost
---

<script>
  import { EulerProblem } from "@components/blogpost";
	import "katex/dist/katex.min.css";
</script>

<EulerProblem problem={1}>

  Если выписать все натуральные числа меньше 10, кратные 3 или 5, то получим 3, 5, 6 и 9. Сумма этих чисел равна 23.

  Найдите сумму всех чисел меньше 1000, кратных 3 или 5.

</EulerProblem>

## Вычислительный подход

В первую очередь попробуем решить задачу "в лоб". Смысл заключается в необходимости проверить каждое натуральное число до тысячи не включительно на делимость: либо на 3, либо на 5.

Для проверки на делимость используем [оператор modulo][modulo-operator], этот оператор вычисляет остаток от деления. Соответственно, если отстаток равен нулю, то число делится на делитель без остатка:

```js
number % divisor == 0
```

Итого, решение будет следующим:

```python
def main(limit: number): number:
  total = 0
  for number in range(limit):
    if number % 3 == 0 or number % 5 == 0:
      total += number
  return number
```

Или то же решение, но с использованием list comprehension:

```python
  result = lambda limit: sum([ i for i in range(limit) if i % 3 == 0 or i % 5 == 0 ])
```

## Арифметический подход

Несмотря на то, что решение "в лоб" оказалось достаточно простым и быстрым, всё ещё имеется простор для поиска более эффективного решения. Выпишем числа, делящиеся, к примеру на 3, без остатка:

```math
3, 6, 9, 12, 15, 18...
```

Заметим, что на самом деле, эта числовая последовательность является [арифметической прогрессией][arithmetic-progression] с разностью в 3. Немного упростим последовательность, вынеся общий делитель за скобку:

```math
3 \times (1 + 2 + 3 + 4 + ... + N)
```

Подобные рассуждения верны для последовательности чисел, делящихся без остатка на 5 и для любых натуральных чисел в частности. В любом случае, имеем одну и ту же арифметическую прогрессию, сумму которой найдём с помощью [формулы][arithmetic-series]:

```math
S_n = \frac{a_1 + a_n}{2} \times n
```

Используя формулу суммы, можем вычислить сумму всех натуральных чисел, делимых на произвольный делитель до некоторого заданного значения с помощью небольшой функции:

```python
def arithmetic_series(divisor, limit):
  last_multiple = floor((limit - 1 ) / divisor)
  return divisor * (1 + last_multiple) * last_multiple / 2
```

Последним шагом для решения задачи вычислим результат как сумму двух прогрессий:

```python
def main(limit):
  return arithmetic_series(3, limit) + arithmetic_series(5, limit)
```

Правда, результат окажется неверным. Мы не учли, что некоторые числа, такие как 15, делятся и на 3 и на 5. Складывая обе прогрессии, мы дублируем некоторые числа. Необходимо их вычесть для корректного итогового результата:

```python
def arithmetic_series(divisor, limit):
  last_multiple = floor((limit - 1) / divisor)
  return divisor * (1 + last_multiple) * last_multiple / 2

def main(limit):
  return arithmetic_series(3, limit) + arithmetic_series(5, limit) - arithmetic_series(3 * 5, limit)
```

## Сравнение

Решение "в лоб" подразумевает алгоритм, при котором необходимо проверить каждое число. В *Big O* нотации подобный сценарий описывается линейный: *O(n)*. На самом деле, крайне неплохо. В случае использования арифметической прогрессии - получаем постоянное вычислительное время, что выражается как *O(1)*, что заметно лучше.

## Ссылки

- [Проект Эйлера][project-euler]
- [Проект Эйлера, Проблема №1: Делители 3 или 5][problem]
- [Арифметическая прогрессия][arithmetic-progression]
- [Сумма арифметической прогресси][arithmetic-series]

<!-- Reference Links -->
[project-euler]: http://projecteuler.net/
[problem]: https://projecteuler.net/problem=1
[modulo-operator]: https://en.wikipedia.org/wiki/Modulo_operation
[arithmetic-progression]: https://en.wikipedia.org/wiki/Arithmetic_progression
[arithmetic-series]: https://www.khanacademy.org/math/precalculus/x9e81a4f98389efdf:series/x9e81a4f98389efdf:arith-series/v/formula-for-arithmetic-series