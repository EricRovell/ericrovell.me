---
created: 2022-10-03T00:31:00.000Z
description: "Sum square difference."
keywords: [ "project euler", "math" ]
lang: en
layout: blogpost
series: "project-euler"
slug: "project-euler-6"
title: "Project Euler #6"
translation: { lang: "russian", slug: "проект-эйлера-6" }
updated: 2022-11-05T03:18:00.000Z
---

<script>
	import { EulerProblem } from "../components";
	import "katex/dist/katex.min.css";
</script>

<EulerProblem problem={6}>

The sum of the squares of the first ten natural numbers is:

```math
1^2 + 2^2 + ... + 10^2 = 385
```

The square of the sum of the first ten natural numbers is:

```math
(1 + 2 + ... + 10)^2 = 55^2 = 3025
```

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is:

```math
3025 - 385 = 2640
```

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

</EulerProblem>

## Brute-force solution

To get the things done, let’s define two variables: `sum` - to store the sum of natural numbers, and `sqSum` to store a sum of squares. Using cycle, calculate the values and the resulting difference:

```ts
const main = (n: number): number => {
	let sum = 0;
	let sqSum = 0;

	for (let int = 0; int <= n; int++) {
		sum += int;
		sqSum += int ** 2;
	}

	return sum ** 2 - sqSum;
};
```

The brute-force approach is really simple and fast enough. The complexity of the algorithm is linear: $$O(n)$$, as the solution scales linearly with `n`, which is good. Nevertheless, the are some space for improvement in analytical approach.

## Analytical approach

Let’s dive in some math to get the problem done.

### The sum of natural numbers sequence

The sum of natural numbers can be expressed as the [arethmetic series sum][arithmetic-series], where $$a_{1} = 1, d = 1$$:

```math
\begin{aligned}
	\sum_{i=1}^{n} a_{i} &= \frac{2a_{1} + d(n - 1)}{2} n\\
	&= \frac{n(n + 1)}{2}\\
\end{aligned}
```

### The sum of squares of natural numbers

Unlike the sum of natural numbers, getting the sum of squares formula is a bit trickier. We will try to derive the formula, but you can jump directly to the [result](#sum-of-squares-formula).

Let's start our investigation by enumerating the sum of squares values:

```math
\begin{array}{l|cccccc}
n & 1 & 2 & 3 & 4 & 5 & 6\\ \hline
\sum_{i=1}^{n} i^2 & 1 & 5 & 14 & 30 & 55 & 91
\end{array}
```

Next, let's calculate the function value increments:

```math
\begin{array}{l|cccccc}
\sum_{i=1}^{n} i^2 & 1 & 5 & 14 & 30 & 55 & 91\\ \hline
\Delta_1 & & +4 & +9 & +16 & +25 & +36\\
\Delta_2 & & & +5 & +7 & +9 & +11\\
\Delta_3 & & & & +2 & +2 & +2\\
\end{array}
```

Only third order increments have linear behavior. It means the function is the 3rd order polynomial:

```math
ax^3 + bx^2 + cx + d = 0
```

As the sum of squares equals zero for input zero, the coefficient $d = 0$:

```math
a * 0^3 + b * 0^2 + c * 0 + d = 0 \Rightarrow d = 0
```

We have 3 unknown variables $(a, b, c)$, let's define the system of equations:

```math
\left\{
\begin{array}{ll}
a + b + c &= 1 \\
8a + 4b + 2c &= 5 \\
27a + 9b + 3c &= 17
\end{array}
\right.
```

And in the matrix form:

```math
\left[
	\begin{array}{ccc}
		1&1&1\\
		8&4&2\\
		27&9&3
	\end{array}
	\right]
	\left[
		\begin{array}{ccc}
		a\\
		b\\
		c
	\end{array}
	\right]
	=
	\left[
		\begin{array}{ccc}
		1\\
		5\\
		14
	\end{array}
	\right]
```

Solving the equation we have:

```math
	\left[
	\begin{array}{ccc}
		a\\
		b\\
		c
	\end{array}
	\right]
	=
	\left[
		\begin{array}{ccc}
		1/3\\
		1/2\\
		1/6
	\end{array}
	\right]
```

So, the function we have been searching for:

```math
	\begin{aligned}
	\sum_{n = 1}^{x}n^2 = \frac{1}{3}x^3 + \frac{1}{2}x^2 + \frac{1}{6}x
	\end{aligned}
```

Let's refactor a function to get it's well-known form:

```math
	\begin{aligned}
		\sum_{n = 1}^{x}n^2 &= \frac{2x^3 + 3x^2 + x}{6} \\
				&= \frac{x(2x^2 + 3x + 1)}{6} \\
				&= \frac{x(2x + 1)(x + 1)}{6}
	\end{aligned}
```

As the result, the sum of squares of natural numbers can be expressed using the [square pyramidal number formula][square-pyramidal-number]:

<p id="sum-of-squares-formula">

```math
\sum_{i=1}^{n} i^2 = \frac{n(n + 1)(2n + 1)}{6}
```

</p>

### Sum difference

Let’s find the difference between these formulae:

```math
\begin{aligned}
	(S_{n})^2 - S_{n}^2 &= \\
	&= \left(\frac{n(n + 1)}{2}\right)^2 - \frac{n(n + 1)(2n + 1)}{6} \\
	&= n(n + 1) \left(\frac{n(n + 1)}{4} - \frac{(2n + 1)}{6} \right) \\
	&= n(n + 1) \left(\frac{3n(n + 1) - 2(2n + 1)}{12} \right) \\
	&= \frac{1}{12}n(n + 1)(3n^2 - n - 2) \\
	&= \frac{1}{12}n(n + 1)(n - 1)(3n + 2) \\
	&= \frac{1}{12}n(n^2 - 1)(3n + 2) \\
\end{aligned}
```

As the result, the problem can be solved using one compact expression:

```ts
const main = (n: number): number => {
	return n * (n ** 2 - 1) * (3 * n + 2) / 12;
};
```

This approach has a constant time complexity $$O(1)$$, which means the execution time is constant as a function of `n`.

## Results

Brute-force for this problem works rather well, we have to increase `n` significantly before there will be problems with execution time. Despite the effectiveness of brute-force solution, there is a much more interesting solution should we dive in into math, which will be only limited by the size of the initeger storage we use.

The source code can be found [here][source-code].

## Related resources

- [Project Euler, Problem 6: Sum square difference](https://projecteuler.net/problem=6)
- [Arithmetic series][arithmetic-series]
- [Square pyramidal number][square-pyramidal-number]

<!-- Rederence Links -->

[source-code]: https://github.com/EricRovell/project-euler-ts/tree/main/src/solutions/006
[arithmetic-series]: https://en.wikipedia.org/wiki/Arithmetic_progression#Sum
[square-pyramidal-number]: https://en.wikipedia.org/wiki/Square_pyramidal_number
