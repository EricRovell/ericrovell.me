---
created: 2022-08-16T14:41:00.000Z
description: "Может ли за случайностью скрываться фрактал?"
keywords: [ "generative art", "math" ]
lang: ru
layout: blogpost
published: false
slug: "игра-хаоса"
title: "Игра хаоса"
updated: 2022-08-16T14:41:00.000Z
---

<script>
	import { ChaosGame } from "./components";
	import * as Interactive from "./interactive";
	import t from "./locale/ru.json";
</script>

Фракталы - одни из самых интересных, порадающих воображение математических объектов. Фракталы обладают свойством самоподобия. Простыми словами, фрактал в точности или приближённо совпадает с частью самого себя. И может показаться, что случайность и фракталы не могут иметь чего-либо общего.

## Игра Хаоса и её правила

Игра Хаоса - это метод создания итеративных фракталов с помощью многоугольников.

Приведём правила игры на простейшем случае - треугольнике:

1. Пронумируем вершины треугольника;
2. Отметим произвольную точку внутри треугольника;
3. Случайным образом выбираем одну из вершин треугольника;
4. Перемещаемся и отмечаем середину отрезка, соединяющего произвольную точку и случайно выбранную вершину треугольника;
5. Повторяем пункты (3-4) множество раз.

Таким образом, внутренняя область многоугольника последовательно заполняется точками хаотичным образом. Может показаться, что в этом алгоритме нет чего-либо примечательного и со временем точки покроют всю доступную область. Иллюстративно ознакомиться с работой алгоритма и взглянуть на результат можно на интерактивной площадке ниже.

<Interactive.ChaosGameRulesDemo
	origin="{{ y: 50 }}"
	t="{t["game-rules-demo"]}"
/>

Перед нами предстаёт удивительный картина: некоторые области треугольника так и останутся незакрашенными, несмотря на количество итераций. Результатом окажется фрактал, известный как ["Треугольник Серпинского"][sierpinski-triangle], впервые описанного польским математиком Вацлавом Серпинским в 1915 году:

<ChaosGame
	origin="{{ y: 35 }}"
	points="{7500}"
	scale="{175}"
	palette="red"
	pointSize="{0.75}"
>
	Треугольник Серпинского, 7500 итераций "Игры Хаоса"
</ChaosGame>

## Немного красок

Первым делом, прежде чем начать более тесное знакомство с "Игрой Хаоса", внесём малую, но крайне важную в дальнейшем коррективу, не влиющую на результат: присвоим каждой вершине цвет. Сделать это можно самыми разными способами, однако естественным образом воспользуемся цветовым кругом. Представим, что наш треугольник вписан в цветовой круг и таким образом цвет будет связан с вершиной многоугольника углом поворота вокруг центра описанной окружности.

<ChaosGame
	origin="{{ y: 35 }}"
	points="{7500}"
	scale="{175}"
	pointSize="{0.75}"
>
	Треугольник Серпинского, 7500 итераций "Игры Хаоса"
</ChaosGame>

## Обобщение сторон и скучный случай

Попытаемся обобщить правила "Игры Хаоса". Самым очевидным и наиболее простым способом сделать это можно с помощью количества сторон многоугольника. Рассмотрим следующий наиболее простой пример - квадрат:

<ChaosGame
	points="{7500}"
	polygon="{4}"
	scale="{200}"
	pointSize="{0.75}"
>
	"Игра Хаоса" в четырёхугольнике (квадрате), 7500 итераций
</ChaosGame>

К сожалению, в случае с четырёхугольником "Игра Хаоса" не даёт интересного результата, точки равномерно заполняют область многоугольника (чего обычно и ожидается при первом знакомстве с правилами алгоритма). На самом деле, четырёхугольник - единственный "непримечательный" случай, и тому есть объяснение.

Предположим, что внутри произвольного многоугольника имеется множество случайных точек. Пусть волей немыслимых обстоятельств и удачи каждая по правилам игры сдвинется (важно, что именно сдвинется - для иллюстративности объяснения) в сторону одной и той же вершины. Результатом окажется новая закрашенная область, подобную исходному многоугольнику с машстаборм 1:2. Повторив подобный сдвиг для каждой из вершин, и соединяя всё воедино, получаем карту плотности точек - иллюстративное отображение возможного расположения точек.

Если внутри карты плотности имеются пустоты, то предположение о равномерном распределении точек - ложь, далее необходимо повторить процедуру снова и снова, получая в итоге фрактал:

<Interactive.PolygonDensityMap
	n="{4}"
	t="{t["polygon-density-map"]}"
/>

В первую очередь можно выделить треугольник и квадрат: результат кардинально отличается от остальных многоугольников. Это можно объяснить отсутствием какого-либо пересечения плотностей, связанных с вершинами.

Так как квадрат можно покрыть четырьмя подобными копиями себя (k = 0.5), то пустот не возникает (треугольник тоже, но тут важно и количество сторон). По этой причине наблюдается равномерное распределение точек. Другим подтверждением этого факта является несмешиваемость цветов, наблюдаемую у квадрата (и треугольника). В остальных случаях, как можно заметить по пересечению плотностей и имеющимся пустотам, можно предсказать визуальную структуру будущего фрактала.

## Неслучайная случайность

До сих пор фракталы выглядели довольно привычно, если можно так выразиться. Самое интересное начинается, когда мы решим "вмешаться" в процесс "случайности" выбора. Вершины многоугольника всё также будут избираться случайным образом, но с некоторым вмешательством  - включением некого свода правил. Рассмотрим это на примере "скучного" четырёхугольника:

<section class="wide grid-flexible">
	<div class="grid-flexible" style="display: flex; flex-wrap: wrap; justify-content: center;">
		<ChaosGame
			points="{2500}"
			polygon="{4}"
			scale="{200}"
			pointSize="{0.75}"
			distances="{[
				{ index: -1, values: [ 1, 2, 3 ] }
			]}"
		>
			Вершина не может быть выбрана два раза подряд
		</ChaosGame>
		<ChaosGame
			points="{2500}"
			polygon="{4}"
			scale="{200}"
			pointSize="{0.75}"
			distances="{[
				{ index: -1, values: [ 1, 2, 4 ] }
			]}"
		>
			Вершина не может быть в одном шаге от предыдущей
		</ChaosGame>
		<ChaosGame
			points="{2500}"
			polygon="{4}"
			scale="{200}"
			pointSize="{0.75}"
			distances="{[
				{ index: -1, values: [ 1, 3, 4 ] }
			]}"
		>
			Следующая вершина не может быть на диагонали от текущей
		</ChaosGame>
	</div>
</section>

Результаты поражают. Тот самый единственный "скучный" случай перестал быть скучным. Стоило лишь немного вмешаться в "случайность", и подобных правил может быть, как может показаться, сформулировано немыслимое количество:

- Соседи случайной вершины не могут быть выбраны в следующий раз;
- Если та же самая вершина была выбрана два раза подряд, то следующая должна быть хотя бы в двух шагах от неё.

Список можно продолжать и продолжать. Наличие подобного рода ограничений в процесс "случайности" открывает двери целому множеству возможных фракталов. Несмотря на, казалось бы, абсолютно различного рода формулировок правил, их можно описать более практичным и компактным образом на языке множеств. Так как в утверждениях используются лишь вершины и условия выбора этих же вершин, то всё сводится к множеству разрешённых (запрещённых) расстояний до следующего выбора.

К примеру, правило "вершина не может быть выбрана два раза подряд" для четырёхугольника может быть сформулировано множеством { 1, 2, 3 }: в множестве перечислены расстояния до следующих возможных вершин. Или же для краткости !{ 4 } - как запрещённое расстояние до следующей вершины; а так как вершин всего четыре, то получается как раз та же самая.

В таком виде правила звучат не особо интересно и не всегда понятно как их сформулировать обратно на человеческий язык, но подобным образом проще находить новые результаты и даже посчитать количество всех возможных формулировок.

Для подсчёта возможных комбинаций необходимо посчитать количество подмножеств множества, содержащего все возможные вершины. Треугольник Серпинского получается множеством { 1, 2, 3 } - таким образом может быть выбрана любая вершина. [Количество всех возможных комбинаций][set-size] (включая пустое множество - его рассматривать не стоит, нужно хоть куда-то двигаться) находится как удвоенный квадрат количества элементов этого множества.

Например:

- Для треугольника: 7,
- Для четырёхугольника: 15,
- Для пятиугольника: 31.

В итоге, количество возможных комбинаций удваивается с каждой новой стороной многоугольника. Попробовать рассмотреть все доступные комбинации для типичных многоугольников можно на интерактивной площадке ниже.

<Interactive.ChaosRestrictionSubsetsDemo
	n="{4}"
	t="{t["restrictions-subset"]}"
/>

На самом деле, этим дело не ограничивается. Более изощренные формулировки возможно описать лишь множеством ограничений. Например, вот что получится при запрете выбора следующей вершины на расстоянии 1 от предыдущей и 3 от предпредыдущей:

<Interactive.ChaosGameRandomRestriction
	t="{t["random-restrictions"]}"
/>

С учётом предпредыдущей выбранной вершины для формулировки ограничений (не стоит останавливаться, можно уходить в прошлое ещё "глубже"), количество новых фракталов становится ещё больше: если при ограничении одной вершины количество возможностей 2^n - 1, то после учёта предпредыдущей - все (2^n - 1) * n. Если для треугольника это 343 комбинации (было всего 7), то для восьмиугольника целых 17 878 103 347 812 890 625!

## Изменяя шаг

До сих пор во время "игры" мы перемещали точку на полпути к случайно выбранной вершине. Почему бы не изменить это, введя новый параметр - фактор шага "r". Используя величину шага как коэффициент, получаем что при *r = 0* движения не происходит, при *r = 1* точка перемещается непосредственно к самой вершине, а *r = 0.5* - та самая величина, которой мы пользовались до сих пор. Конечно, можно использовать величину и за пределами единицы, выходя за внутреннюю область многоугольника.

Попробуем поэкспериментировать, как же влияет фактор шага на результат:

<Interactive.ChaosGameStepsDemo
	t="{t["step-rule-values-demo"]}"
/>

Изменяя коэффициент, можно увидеть, как масштабируется привычный рисунок. Самое важное, чему стоит уделить внимание - при определённой величине шага при отдалении "плотностей точек" друг от друга, можно получить непересекающиеся области. Величина коэффициент при этом будет зависеть от количества сторон многоугольника. В общем случае *r =  3 / (n + 3)*, где n - количество сторон многоугольника. С таким коэффициентом даже обделённый квадрат перестаёт быть скучным и демонстрирует интересный паттерн.

Коэффициент удобен для описания параметра, однако он описывает *относительную* величину шага. Не стоит себя ограничивать, для величины шага можно смело использовать и *абсолютные* значения, другими словами, двигаясь в любом направлении на любое заданное расстояние.

<Interactive.ChaosGameStepsDemo
	factor={false}
	t="{t["step-rule-values-demo"]}"
/>

## Выходя из хаоса

Попробуйте сгенерировать свой вариант "Игры Хаоса", при желании можно сохранить результат!

<Interactive.ChaosGameCreator
	t="{t["chaos-game-creator"]}"
/>

## Ссылки

- [Треугольник Серпинского][sierpinski-triangle]
- [The Chaos Game: Sierpinski triangles and beyond, part 1](https://community.wolfram.com/groups/-/m/t/1025180)
- [Chaos Game - Numberphile](https://www.youtube.com/watch?v=kbKtFN71Lfs&loop=0)
- [The Chaos Game in JavaScript](https://medium.com/@nnwilliams8/the-chaos-game-in-javascript-69af056c6ec)
- [Tha Chaos Game](https://beltoforion.de/en/recreational_mathematics/chaos_game.php)

<!-- Reference Links -->

[sierpinski-triangle]: https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B5%D1%83%D0%B3%D0%BE%D0%BB%D1%8C%D0%BD%D0%B8%D0%BA_%D0%A1%D0%B5%D1%80%D0%BF%D0%B8%D0%BD%D1%81%D0%BA%D0%BE%D0%B3%D0%BE
[set-size]: https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B4%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%BE#%D0%9F%D0%BE%D0%B4%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B0_%D0%BA%D0%BE%D0%BD%D0%B5%D1%87%D0%BD%D1%8B%D1%85_%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2