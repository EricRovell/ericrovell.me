---
created: 2022-10-14T17:24:00.000Z
description: "Разберёмся в том, как устроена система обозначения чисел и как мы к этому пришли."
draft: true
keywords: [ "math", "radix", "numbers" ]
lang: ru
layout: blogpost
slug: "системы-счисления"
title: "Системы счисления"
---

<script>
	import * as Interactive from "./interactive";
	import t from "./translations/ru.json";
	import "katex/dist/katex.min.css";
</script>

## Обозначение чисел

Числа являются неотъёмлимой частью нашей жизни и десятичная система счисления глубоко пустила корни в наше сознание. В современном мире обывателю непривычно представить, что числа можно обозначать как-то иначе. В школе нас знакомят с римскими цифрами, на уроках информатики мы узнаём про привычную компьютеру двоичную систему, но в быту крайне редко приходится сталкиваться с чем-то помимо десятичной системы.

На самом же деле, в числе 10 нет ничего особенного. Существует целое множество способов представить числа как-то иначе. Некоторые способы в чём-то удобнее других, однако нет того самого уникального способа, каким можно было бы считать десятичную в силу её распространнёности. Мы погрузимся в краткий исторический экскурс, чтобы проследить этапы развития систем обозначения чисел, узнаем особенности их работы, достинства и недостатки. Цель этого путешествия - понять устройство систем счисления.

## Система счисления

Система счисления - это способ представления чисел.

Что же подразумевается под представлением числа? Система счисления может включать в себя символы обозначения чисел, а также правила их обозначения.

## Непозиционные системы счисления

Непозиционным системам счисления характерно отсутствие связи между величиной цифры и её разрядом (положением). Этот тип наиболее древний и более прост в использовании. К примеру, если представить себя на месте пастуха, возникает необходимость сверять количество овец утром и вечером. Считать овец для и даже знать числа для этого совсем не обязательно. Каждую овцу можно привести в соответствие с небольшим камнем. В начале дня, выпуская овцу за овцой из загона, пастух откладывает камни за пазуху и вынимает в конце дня, запуская овец обратно в загон. В этом примере важен тот факт, что перемешав камни, мы не меняем ровным счётом ничего. Число остаётся прежним.

Простота непозиционных систем счисления имеет обратную сторону — запись и представление всё больших чисел становится серьёзной проблемой. В примере с пастухом, имеющим крупное стадо овец, придётся таскать за пазухой целое множество камней, это непрактично, тяжело, возрастает риск потерять часть камней и сбиться со счёту.

Для решения проблемы люди начали группировать элементы, заменяя некую фиксированную группу на другой предмет (или обозначая другим символом). Пастух может подменять каждые 10 камней на камень чуть покрупнее или другого окраса. На практике, изначально для подсчёта использовались пальцы рук, поэтому первые обозначения групп появились для чисел 5 и 10. Группировка позволила продвинуться заметно дальше и создать более практичные системы счисления.

### Древнеегипетская десятичная система

Одним из примеров непозиционных систем счисления является древнеегипетская десятичная система. В ней использовались специальные символы для обозначения чисел различной степени десятки: $1, 10, 100, 1000$ и так далее:

<!-- Egyptian Unicode HTML Codes -->
<Interactive.Numerals
	codes="{[
		"&#78820",
		"&#78726",
		"&#78690",
		"&#78268",
		"&#77997",
		"&#78224",
		"&#77928"
	]}"
/>

Так как основой записи и обозначения чисел является число 10, система называется десятичной, а само число 10 — основанием системы. Все числа в Египетской системе записывались как комбинация символов, каждый из которых не повторялся более девяти раз. Итоговое значение числа определялось суммой значений символов, а порядок расположения символов не имел значения.

### Римская система счисления

Другим примером непозиционных систем счисления является римская, вторая по узнаваемости после десятичной. В данной системе для обозначения чисел использовались буквы латинского алфавита, что являлось существенным преимуществом для типичного обывателя. Из достоинств римской системы также была простота: использовалось небольшое число обозначений, а в таких числах как $III$ было проще увидеть тройку, чем в арабской $3$.

Римская система за время своего существования претерпела ряд заметных изменений и в целом, считается одной из самых неструктурированных систем. К примеру, были добавлены новые символы для записи крупных чисел, введенно обозначение нуля, но в основе своей использовались следующие общепринятые обозначения:

```math
\begin{array}{c:c:c:c:c:c:c}
I & V & X & L & C & D & M\\ \hline
1 & 5 & 10 & 50 & 100 & 500 & 1000
\end{array}
```

Несмотря на наличие символов для чисел $50$ и $500$, римская система имеет основание 10. В привычном нам виде римская система позволяет записать числа до $3999$ включительно, так как один символ не может повторяться более трёх раз:

<Interactive.RomanNumerals t="{t["roman-numerals"]}" />

## Позиционные системы счисления

Позиционные системы являются следующим витком развития систем счисления. Как ясно из названия, позиционную систему характеризует связь разряда цифры числа с его значением. Привычная нам десятичная система счисления как раз и является примером позиционных систем. Возьмём случайное число - $123$, поменяем произвольным образом цифры местами и получим, к примеру, $213$. Банально, но в итоге имеем два совершенно разных по величине числа.

Позиционные системы имеют целый ряд преимуществ: запись становится компактной, упрощаются проводимые операции. Именно позиционные системы решают проблему с обозначением всё более крупных чисел. Если раньше при достижении предела большего обозначения приходилось придумывать названия и символ для следующего предела, то теперь в этом не было необходимости.

Непозиционные системы в свою очередь использовали лишь обозначения, позиционная система вводит правила использования обозначаемых символов, что позволяют их переиспользовать для новых чисел.

Попробуем разобраться, каким образом структурируется произвольное число в позиционной системе счисления. В системе с произвольным основанием $r$ - в распоряжении имеется $r$ доступных символов, используя (пусть и не совсем обязательно) привычные числовые обозначения, получаем ряд $0, 1, 2, ... , r - 1$. К примеру, в привычной десятичной системе это $0, 1, 2, ... , 9$.

Используя данный набор символов, можно ввести счёт до числа $r - 1$, далее позиционная система переиспользует те же обозначения, располагая символы в последующей позиции, именуемой разрядом: $r_1 r_0$. Разряды располагаются один за другим по мере необходимости, когда уже имеющихся обозначений становится недостаточно.

Если первый разряд имеет $r$ возможных комбинаций, то последующий позволяет уже $r * r = r^2$ комбинаций. Таким образом, каждый новый разряд увеличивает количество комбинаций в $r$ раз. К примеру в десятичной системе, в каждой тысяче - десять сотен, в каждой сотне - десять десятков, в каждом десятке - десять символов.

Итого, в позиционной системе с основанием $r$ число $N$ может быть записано однозначной комбинацией:

<p id="positional-number-formula">

```math
\begin{aligned}
	N &= \sum_{i} d_i r^i \\
	&= ... + d_2 r^2 + d_1 r^1 + d_0 r^0,\\
\end{aligned}
```

</p>

где $d_i$ - цифры числа, используемые для обозначения в ряду $0, 1, 2, ... , r - 1$.

Мы ещё вернёмся к данному уравнению при переводе чисел из одной системы в другую, и попытаемся объяснить принцип его работы с помощью аналогии. Прежде, ознакомимся с некоторыми примерами позиционных систем.

### Вавилонская шестидесятеричная система

Вавилонская система счисления сформировалась в Древнем Вавилоне в районе около двух тысяч лет до нашей эры. Для обозначения использовалось два символа: «прямой» клин — для единиц, и «лежачий» — для десятков.

<!-- Cuneiform -->
<Interactive.Numerals
	codes="{[
		"&#74773",
		"&#74507"
	]}"
/>

Вавилонская шестидесятеричная система счисления является первой известной системой, основанной на позиционном принципе, пусть и частично. Частичность обсуловлена нехваткой символа отсутствующего разряда — числа нуль. Заметно позже, лишь за 300 лет до нашей эры, недоразумение всё же исправили добавлением символа в форме двух клиньев:

<!-- Cuneiform Zero -->
<Interactive.Numerals
	codes="{[ "&#74826" ]}"
	calcValue="{() => 0}"
/>

Использовалось "новвоведение" изредка и не совсем практиично. Нуль не использовался для обозначения крайних значений, по этой причине различать некоторые числа, такие как $77$ и $7700$ было невозможно, приходилось догадываться из контекста.

<!--
	Интерактивная площадка для ввода числа в десятичной системе и перевода в Вавилонскую систему.
-->

### Двоичная система

Двоичная система имеет ряд серьёзных преимуществ, благодаря которым она смогла отодвинуть десятичную систему со своего коронного места в области электронных технологий. Двоичная система имеет основание $2$ и использует два символа: единицу и нуль. К примеру, число $2$ в двоичной системе записывается как $10$.

Число в двоичной системе использует заметно больше символов для записи аналогичного числа в десятичной; например, $256$ $058$ имеет двоичное представление как $111$ $11010$ $00001$ $11010$. Причина кроется в том, что цифра в двоичной системе характеризует лишь две возможности: $0$ или $1$, в то время как в десятичной их все $10$; другими словами двоичный символ несёт меньшее количество информации. Намного проще сконструировать устройство, различающее два состояния, нежели целых 10; однако большую роль играет возможность не только хранить числовую информацию, но и возможность кодировать логические выражения. Та самая дитохомия "истины" и "лжи", имеющей значение единицы и нуля, и всё это сводится лишь к двум символам.

### Шестнадцатеричная система

Шестидесятеричная система имеет основание $16$ и использует привычные цифры $0-9$ и латинские буквы $A-F$ для обозначения чисел в промежутке с $10$ по $15$, к примеру число $256_{10}$ будет записываться как $FF_{16}$. Система широко применяется в низкоуровневом программировании, посколько минимальной адресуемой единицей памяти является 1 байт, содержащий 8 бит, значение которого удобно записать двумя шеснадцатеричными цифрами.

Помимо этого, на шеснадцатеричную систему можно натолкнуться работая с цветами в формате <abbr title="Red Green Blue">RGB</abbr> записываемыми в формате <abbr title="Hexadecimal">HEX</abbr> числа:

<!--
	Интерактивная площадка для ввода числа в 16 системе и перевода в 10 систему.
	Добавить цвет
-->

### Однородные и смешанные позиционные системы счисления

Так же стоит упомянуть, что позиционные системы счисления подразделяются на "однородные" и "смешанные".

Однородную систему счисления характеризует отсутствие ограничений на набор допустимых символов исходя из разряда. Привычная десятичная система является наглядным примером — при записи чисел доспустимо использование любой из доступных цифр от 0 до 9, вне зависимости от разряда.

Смешанные системы счисления характеризуются ограничениями к набору допустимых символов в зависимости от разряда. Примером является система измерения времени: в разряде минут и секунд допустимы значения с 0 до 59, для значения часов — с 0 до 23.

## Преобразование из одной системы в другую

Существует множество способов перевода из одной системы счисления в другую. Для практического применения достаточно двух типов преобразований: из произвольной системы в десятичную и, наоборот, из десятичной в произвольную. Таким образом, в два этапа можно произвести преобразование из произвольной системы счисления в произвольную, где десятичная играет роль промежуточного звена. Преобразования будут рассматриваться в контексте позиционных однородных систем.

Важно понимать, преобразования практически никогда не производятся человеком вручную, лишь в академических целях. Для расчётов есть компьютеры. Мы, в свою очередь, сделаем акцент на понимании принципов работы перевода позиционных систем.

### Структура числа

В случае, если [определение числа в позиционной системе](#positional-number-formula) счисления оказалось не совсем понятным, можем воспользоваться аналогией. Понимание определения необходимо для выстраивания логики преобразования.

Структурно число в позиционной системе можно представить как "молекулу", состояющую из некого уникального набора "атомов" - чисел, сумма которых и составляет число в целом. Разновидности "атомов" определяет основание системы, каждый "атом" представляет из себя число степени основания. В десятичной системе это $10^0 = 1$, $10^1 = 10$, $10^ 2 = 100$ и так далее. Используя лишь эти числа в необходимом количестве можно представить произвольное целое число однозначным образом:

<Interactive.DisassemblingNumber
	t="{t["disassembling-number"]}"
/>

В итоге, преобразование числа из одной системы в другую будет сводится либо к определению той самой комбинации, либо к её разложению.

### Преобразование из десятичной системы в произвольную

Исходя из аналогии с "молекулой", для перевода числа в произвольную систему с основанием $r$ наша задача сводится к определению той самой однозначной комбинации "атомов" ($r^0, r^1, r^2, r^3 ...$) , сумма которых равна исходному числу в десятичной системе.

Действовать необходимо по принципу *жадного алгоритма*:

1. Определяем наибольшее число степени $r$, не превышающее вводное число;
2. Вычитаем максимально возможное количество раз число пункта $1$ из исходного числа;
3. Пункты $1,2$ повторяются до тех пор, исходное число не обратится в нуль.

Степени вычитаемых чисел обозначают разряд, их количество - число разряда. Важно, при записи результатов не пропускать неиспользованные значения степеней. Степени должны быть записаны без пропусков, при необходимости используется нуль.

Ниже можно ознакомиться с этапами перевода произвольного числа из десятичной системы в произвольную для лучшего понимания:

<Interactive.DecimalConversionStages
	t="{t["decimal-conversion-stages"]}"
/>

### Преобразование из произвольной системы в десятичную

Для перевода в десятичную систему необходимо провести "пересчёт". Вспомним [формулу структуры числа](#positional-number-formula) в позиционной системе: каждый разряд определяет своим порядком показатель степени основания, а значением - количество таких степеней. "Пересчёт" в данном случае сводится к разбивке числа на составляющие, те самые "атомы" и суммированию их значений. Так как расчёты проводятся в привычной десятичной системе, получим необходимый результат:

1. Разобьем число на разряды и запишем каждое число как $a_i * r^i$, где $i$ - разряд, а $a_i$ - число в данного разряда;
2. Найдём сумму всех возведённых степеней.

<Interactive.NumberIntoDecimal
	t="{t["number-into-decimal"]}"
/>

## Заключение

Привычные обозначения чисел так прочно вошли в нашу жизнь, что мы, порою, отождествляем обозначения десятичной системы с самими числами. Знакомство с системами счисления позволяют отойти назад и увидеть полную картину: числа - "существуют" в своём отдельном абстрактном мире, а их обозначения - лишь попытка систематизировать этот несоизмеримый абстрактный мир для практического применения. Пусть мы и пользуемся десятичной системой, существует бесчисленное множество других, более и менее практичных. Например, если бы мы использовали систему с основанием 12, работа с номиналом банкнот и монет стала бы заметно проще, ведь 12 имеет больше делителей, нежели 10. Не так важно уметь переводить из одной системы в другую, как важно понимать принцип работы и использовать ту или иную систему, в зависимости от задачи; лучшим примером в этом является двоичная система.

## Другие источники

- [Основы систем счисления](https://habr.com/ru/post/124395/)
