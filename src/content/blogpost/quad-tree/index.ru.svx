---
cover: "/img/cover-quad-tree.png"
created: 2023-01-17T15:19:00.000Z
description: "Познакомимся со структурой данных, являющейся примером пространственной базой данных."
draft: true
keywords: [ "data structure", "javascript" ]
lang: ru
layout: blogpost
slug: "дерево-квадрантов"
title: "Дерево квадрантов"
---

<script>
	import { CardSketch } from "@components"
	import * as Interactive from "./interactive"
</script>

Дерево квадрантов — древовидная структура данных, имеющая по 4 потомка на каждый внутренний узел. Дерево квадрантов часто используется для рекурсивной разбивки плоскости на квадранты или области. Форма данных, хранящихся на крайних узлах, определяется непосредственно приложением и представляют собой «единицу пространственной информации».

Обычно квадранты представляют из себя квадраты или прямоугольники, но могут иметь и произвольную форму.

Все разновидности данной структуры данных имеют следующие свойства:

- Они разбивают пространство на адаптивные "ячейки" - квадранты;
- Каждая ячейка имеет предельную вместимость, при превышении которой ячейка делится;
- Форма дерева следует пространственной декомпозиции.

Разновидности деревьев могут быть систематизированы в зависимости от представляемых данных, например это могут быть области, точки, отрезки или кривые. Так же важной характеристикой является зависимость порядка обработки данных и формы самого дерева.

Мы познакомимся с деревом квадрантов на примере дерева с квадратными ячейками, содержащими данные в виде точек плоскости.

## Проблема

Рассмотрим применимость дерева квадрантов на практическом примере. Пусть в некоторой ограниченной плоскости имеются `n` движущихся объектов. Задача состоит в определении столкновения объектов в некоторый момент времени.

Для решения поставленной задачи необходимо рассчитать расстояние от каждого объекта до всех остальных. Другими словами, алгоритмическая сложность будет квадратичной: `O(n^2)`, ведь если имеется `n` объектов, то необходимо проверить расстояние целых `n * n` раз.

На самом деле, большую часть проверок можно было бы избежать, если бы мы неким образом имели возможность разграничить слишком удалённые объекты, пересечение с которыми крайне маловероятно. Другими словами, необходимо иметь возможность получать информацию о том, какие объекты находятся в некоторой произвольной области.

<Interactive.ComparingObjects />

В этом нам и поможет дерево квадрантов. Построив дерево для плоскости и предварительно обработав каждый объект, оно позволит нам получать информацию об объектах, находящихся в произвольной области; по итогу будет лишь необходимо провести проверку для части объектов. Этот подход позволит снизить алгоритмическую сложность до `O(n log n)` - логарифмической, в числах - для тысячи объектов количество необходимых операций снижается примерно до *трёх тысяч*. Важно подчеркнуть: с *миллиона* до *трёх тысяч*. Серьёзное увеличение производительности, даже с учётом затрачиваемых ресурсов на построение дерева.

Таким образом, с помощью дерева квадрантов, хранящего координаты объектов, можно решать целый ряд других подобных задач, основанных на пространственном расположении, например, определение ближайшего (отдалённого) объекта от заданного.

## Демонстрация

С учётом использования форм таких "ячеек" как прямоугольники или квадраты, дерево разбивает плоскость на квадранты - напоминающиие собой четверти декартовой системы координат. С ростом вложенности дерева, квадранты разбиваются рекурсивным образом, плоскость делится на всё меньшие области:

<Interactive.QuadTreeDepth />

Пример выше визуально напоминает собой таблицу и даёт мало представления о дереве квадрантов. Рассмотрим более наглядный пример. Коснувшись области, мы можем добавить объект - точку. При последовательном добавлении всё большего количества объектов и превышении предельной вместимости, квадранты будут разбиваться, формируя дерево. В итоге, ни в одной ячейке гарантированно не будет содержаться количество точек, чем квадрант мог бы в себя вместить.

<Interactive.QuadTreeViz />

Увидев, как формируется дерево и что оно из себя представляет, настало время воспользоваться им по назначению. Дерево квадрантов напоминает "пространственную базу данных". Мы можем сделать запрос, указав область и дерево квадрантов укажет на объекты, находящиеся в указанной области. Область, конечно же, может иметь произвольную форму и размеры.

На примере ниже, сформировано дерево квадрантов из ста случайно расположенных точек. При наведении на плоскость будет отображена область в форме прямоугольника или окружности заданных размеров. Лишь точки, находящиеся непосредственно во внутренней части области, будут менять размер и окраску.

<Interactive.QuadTreeQuery />

Таким образом, наглядно демонстрируется результат запроса дереву квадрантов. Мы получаем доступ к информации в зависимости от местоположения на плоскости, что позволяет более эффективно решать поставленные задачи.

### Пример использования

Дерево квадрантов используется на сайте в разеделе ["Визуализации"](/ru/sketch) - моделировании поведения стаи.

<div style="width: min(15ch, 100% - var(--space-3); height: min-content;">
	<CardSketch
		cover="/img/cover-flocking.png"
		description="Flocking modeling"
		title="Flocking"
		url="/ru/sketch/flocking"
	/>
</div>

Дерево в данном случае является оптимизацией, что включена по умолчанию. Необходимость в использовании данной структуры данных заключается в формировании различного рода сил, движущих членом стаи. Силы формируются на основе соседей, в первую очередь, их отдалённости. Более далёкие соседи вкладывают заметно низкое влияние, которым можно пренебречь в целях оптимизации.

Таким образом, каждый член стаи обладает таким параметром как "восприятие", представляющим собой расстояние, за пределами которого другие члены стаи перестают оказывать влияние. На основе координат члена стаи и области, задаваемой "восприятием", дерево квадрантов позволяет узнать лишь о тех членах стаи, которые должны оказывать существенное влияние.

Благодрая дереву квадрантов производительность анимации заметно возрастает. Этому можно убедиться, отключив оптимизацию и увеличив количество членов стаи.

## Имплементация

