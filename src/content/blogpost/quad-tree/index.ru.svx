---
cover: "/img/cover-quad-tree.png"
created: 2023-01-17T15:19:00.000Z
description: "Познакомимся со структурой данных, являющейся примером пространственной базой данных."
draft: true
keywords: [ "data structure", "javascript" ]
lang: ru
layout: blogpost
slug: "дерево-квадрантов"
title: "Дерево квадрантов"
---

<script>
	import * as Interactive from "./interactive"
</script>

Дерево квадрантов — древовидная структура данных, имеющая по 4 потомка на каждый внутренний узел. Дерево квадрантов часто используется для разбивки рекурсивной разбивки плоскости на квадранты или области. Форма данных, хранящихся на крайних узлах, определяется непосредственно приложением и представляют собой «единицу пространственной информации».

Обычно квадранты представляют из себя квадраты или прямоугольники, но могут иметь и произвольную форму.

Все разновидности данной структуры данных имеют следующие свойства:

- Они разбивают пространство на адаптивные ячейки;
- Каждая ячейка имеет предельную вместимость, при превышении которой ячейка делится;
- Форма дерева следует пространственной декомпозиции.

Разновидности деревьев может систематизированы в зависимости от представляемых данных, например это могут быть области, точки, отрезки или кривые. Так же важной характеристикой является зависимость порядка обработки данных и формы самого дерева.

Мы познакомимся с деревом квадрантов на примере дерева с квадратными ячейками, содержащими данные в виде точек плоскости.

## Проблема

Рассмотрим применимость дерева квадрантов на практическом примере. Пусть имеются `N` движущихся объектов, расположенных произвольным образом в некоторой замкнутой части плоскости. Задача состоит в определении столкновения объектов в некоторый момент времени.

Для решения поставленной задачи необходимо рассчитать расстояние от каждого объекта до всех остальных. Другими словами, алгоритмическая сложность будет квадратичной: `O(n^2)`, ведь если имеется 1000 объектов, то необходимо проверить расстояние целых 1 000 000 раз. На самом деле, большую часть проверок можно избежать; зачем проверять те объекты, что находятся на значимом расстоянии от рассматриваемого? Для этого необходимо каким-то образом хранить информацию о ближайших соседях.

В этом и состоит прелесть дерева квадрантов, оно позволяет нам узнать о ближайших соседях, получить их координаты и провести проверку только для них. Такой подход позволяет снизить алгоритмическую сложность до `O(n log n)` - логарифмической. Для тысячи объектов количество необходимых операций снижается примерно до *трёх тысяч*. С **миллиона** до **трёх тысяч**. Серьёзное увеличение производительности, ведь, тем не менее, создание дерева само по себе - очередная задача, требующая ресурсов и времени.

## Структура

Как уже было отмечено выше, каждый узел дерева имеет по 4 потомка: квадранты, аналогичные четвертям на декартовой системе координат. При необходимости квадранты рекурсивно разбиваются на очередные 4 квадранта, заполняя собой плоскость:

<Interactive.QuadTreeDepth />

<Interactive.QuadTreeViz />

<Interactive.QuadTreeQuery />